CREATE DATABASE casestudy1

use casestudy1



select * from location
--1. Display the number of states present in the LocationTable. 

select state , count(state) from location group by state



-- 2. How many products are of regular type?

select count(product_type) from product where type = 'regular'




--3. How much spending has been done on marketing of product ID 1?

select sum(marketing) from fact where productid = 1



--4. What is the minimum sales of a product?
select productid , min(sales) as 'minimun sales' from fact group by productid


--5. Display the max Cost of Good Sold (COGS). 

select productid , max(cogs) from fact group by ProductId




--6. Display the details of the product where product type is coffee. 


select * from product where product_type = 'coffee'



--7. Display the details where total expenses are greater than 40.

select * from fact where total_expenses > 40

--8. What is the average sales in area code 719?

select avg(sales) from fact where area_code = 719



--9. Find out the total profit generated by 

select sum(profit) from fact f left join location l on f.area_code = l.area_code where state = 'colorado'



--10. Display the average inventory for each product ID. 


select avg(inventory) from fact group by productid


--11. Display state in a sequential order in a Location Table. 

select distinct state from location order by state

select * from location order by state


--12. Display the average budget of the Product where the average budget margin should be greater than 100. 


select avg(budget_profit) from fact having productid  =  (select productid from fact where avg(budget_margin) > 100)


--13. What is the total sales done on date 2010-01-01?

select sum(sales) from fact where date = '2010-01-01'



--14. Display the average total expense of each product ID on an individual date. 

select productid ,date , avg(total_expenses)  as 'avg expense' from fact group by fact.date , productid


--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code

select date, fact.productID, product_type, product, sales, profit, state, fact.area_code 
from fact 
inner join location  on fact.area_code = location.area_code
inner join product on fact.productid = product.productid 
group by fact.productid , fact.Area_Code , fact.date , product_type , product , sales , profit , state 


--16. Display the rank without any gap to show the sales wise rank. 

select productid , sales , DENSE_RANK() over(order by sales desc) as 'rank' from fact

--17. Find the state wise profit and sales. 

select state , sum(profit) , sum(sales) from location inner join fact on location.Area_Code = fact.Area_Code
group by State

--18. Find the state wise profit and sales along with the productname. 

select state ,sum(profit) , sum(sales) , Product from fact inner join location on fact.Area_Code = Location.Area_Code 
inner join Product on fact.ProductId = Product.ProductId
group by state , product


--19. If there is an increase in sales of 5%, calculate the increasedsales. 

select sales, sales*5/100 + sales as '5%_Increased_Sales_Value' from fact


--20. Find the maximum profit along with the product ID and producttype. 

select fact.productid , Product_Type , max(profit) as 'MAX PROFIT'
from fact inner join Product
on fact.ProductId = Product.ProductId
group by fact.ProductId , Product_Type 


--21. Create a stored procedure to fetch the result according to the product typef

create procedure fetch_result @product_type varchar(50)
as
begin
select * from product where Product_Type = @product_type
end

execute fetch_result 'coffee'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 
selecT * , IIF(Total_Expenses  < 60 , 'PROFIT','LOSS') as 'PROFIT/LOSS' from fact 


--23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order. 

SELECT datepart(wk , Date) AS 'Week' , Date, ProductId, SUM(Sales) AS Weekly_Sales
FROM fact GROUP BY ROLLUP(datepart(wk,Date), Date, ProductId)

--24. Apply union and intersection operator on the tables which consist of attribute area code. 

select Area_Code from fact
union
select Area_Code from Location


select Area_Code from fact
intersect
select Area_Code from Location




--25. Create a user-defined function for the product table to fetch a particularproduct type based upon the user’s preference. 
create function product_fetch(@pref varchar(50))
returns table
as 
return (select * from Product where Product_Type = @pref)

select * from dbo.product_fetch('coffee')


--26. Change the product type from coffee to tea where product IDis 1 and undo it. 

begin transaction
update product set Product_Type = 'tea' where Product_Type = 'coffee'

rollback



--27. Display the date, product ID and sales where total expenses are between 100 to 200. 


select date , productid , sales from fact where Total_Expenses between 100 and 200



--28. Delete the records in the Product Table for regular type. 

delete from product where Product_Type = 'regular'

--29. Display the ASCII value of the fifth character from the columnProduct.

select ascii(substring(product , 5 ,1) ) from product
